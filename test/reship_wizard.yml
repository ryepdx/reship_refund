-
  Create a sales order...
-
  !record {model: sale.order, id: incorrect_sale}:
    name: "Test SO"
    company_id: stock.res_company_2
    partner_id: base.partner_demo
    partner_invoice_id: base.partner_demo
    partner_shipping_id: base.partner_demo
    shop_id: sale.sale_shop_1
    pricelist_id: product.list0

-
  ...with a sales order line...
-
  !record {model: sale.order.line, id: incorrect_line}:
    order_id: incorrect_sale
    name: "Test Product"
    product_id: test_product
    product_uom_qty: 1
    product_uos_qty: 1
    product_uom: product.product_uom_unit
    price_unit: 30.0

-
  ...and confirm it.
-
  !python {model: sale.order}: |
    self.action_button_confirm(cr, uid, [ref('incorrect_sale')], context=context)

-
  Create a wizard.
-
  !record {model: reship.wizard, id: no_refunds_wiz}:
    sale_order_id: incorrect_sale

-
  Make sure that we can't add new items if we don't have enough refunded items.
-
  !python {model: reship.wizard}: |
    wizard = self.browse(cr, uid, ref("no_refunds_wiz"), context=context)
    line_id = self.pool.get("sale.order.line").copy(cr, uid, wizard.original_lines[0].id)
    res = self.add_line(cr, uid, [wizard.id], line_id)
    assert res.get('tag') == 'action_warn', "Does not show error when adding lines without refunds!"
    wizard = self.browse(cr, uid, wizard.id, context=context)
    assert line_id not in [l.id for l in wizard.new_lines], "Adds lines when it shouldn't!"
    assert line_id in [l.id for l in wizard.original_lines], "Removes lines from original_items when it shouldn't!"

-
  Create a wizard.
-
  !record {model: reship.wizard, id: refunds_wiz}:
    sale_order_id: incorrect_sale

-
  Make sure that we can add new items if we do have enough refunded items.
-
  !python {model: reship.wizard}: |
    wizard = self.browse(cr, uid, ref("refunds_wiz"), context=context)
    refund_line = wizard.original_lines[0]
    self.refund_line(cr, uid, [wizard.id], refund_line.id)
    new_line_id = self.pool.get("sale.order.line").copy(cr, uid, wizard.original_lines[0].id)
    res = self.add_line(cr, uid, [wizard.id], new_line_id)
    assert res.get('tag') != 'action_warn', "Shows error message when it should not!"
    wizard = self.browse(cr, uid, wizard.id, context=context)
    assert refund_line.id not in [l.id for l in wizard.original_lines], "Not removed from original_items!"
    assert refund_line.id in [l.id for l in wizard.refund_lines], "Not added to refund_lines!"
    assert new_line_id in [l.id for l in wizard.new_lines], "Not added to new_lines!"

-
  Create a wizard.
-
  !record {model: reship.wizard, id: refunds_wiz2}:
    sale_order_id: incorrect_sale

-
  Make sure that anything added to the refunded items gets removed from the original items.
-
  !python {model: reship.wizard}: |
    wizard = self.browse(cr, uid, ref("refunds_wiz2"), context=context)
    line = wizard.original_lines[0]
    self.refund_line(cr, uid, [wizard.id], line.id)
    wizard = self.browse(cr, uid, wizard.id, context=context)
    assert line.id not in [l.id for l in wizard.original_lines], "Not removed from original_items!"
    assert line.id in [l.id for l in wizard.refund_lines], "Not added to refund_lines!"
    assert line.id not in [l.id for l in wizard.new_lines], "Refunded line added to new_lines!"

-
  Create a wizard.
-
  !record {model: reship.wizard, id: reship_wiz}:
    sale_order_id: incorrect_sale

-
  Make sure that anything added to the reship items gets moved from the originals items to the reship items.
-
  !python {model: reship.wizard}: |
    wizard = self.browse(cr, uid, ref("reship_wiz"), context=context)
    line = wizard.original_lines[0]
    self.reship_line(cr, uid, [wizard.id], line.id)
    wizard = self.browse(cr, uid, wizard.id, context=context)
    assert line.id not in [l.id for l in wizard.original_lines], "Not removed from original_items!"
    assert line.id in [l.id for l in wizard.reship_lines], "Not added to reship_lines!"

-
  Create a wizard.
-
  !record {model: reship.wizard, id: new_preview_wiz}:
    sale_order_id: incorrect_sale

-
  Make sure that everything in "new items" shows up in the preview.
-
  !python {model: reship.wizard}: |
    wizard = self.browse(cr, uid, ref("new_preview_wiz"), context=context)
    refund_line = wizard.original_lines[0]
    self.refund_line(cr, uid, [wizard.id], refund_line.id)
    wizard = self.browse(cr, uid, wizard.id, context=context)
    new_line_id = self.pool.get("sale.order.line").copy(cr, uid, wizard.original_lines[0].id)
    self.add_line(cr, uid, [wizard.id], new_line_id)
    wizard = self.browse(cr, uid, wizard.id, context=context)
    assert refund_line.id not in [l.id for l in wizard.original_lines], "Not removed from original_items!"
    assert new_line_id in [l.id for l in wizard.preview], "New line not included in preview!"

-
  Create a wizard.
-
  !record {model: reship.wizard, id: reship_preview_wiz}:
    sale_order_id: incorrect_sale

-
  Make sure that everything in "reship items" shows up in the preview.
-
  !python {model: reship.wizard}: |
    wizard = self.browse(cr, uid, ref("reship_preview_wiz"), context=context)
    line = wizard.original_lines[0]
    self.reship_line(cr, uid, [wizard.id], line.id)
    wizard = self.browse(cr, uid, wizard.id, context=context)
    assert line.id not in [l.id for l in wizard.original_lines], "Not removed from original_lines!"
    assert line.id in [l.id for l in wizard.preview], "Reshipped line not included in preview!"

-
  Create a wizard.
-
  !record {model: reship.wizard, id: complete_reship_wiz}:
    sale_order_id: incorrect_sale

-
  Make sure that completing the wizard for a reship creates a sale order with the correct lines and cost.
-
  !python {model: reship.wizard}: |
    wizard = self.browse(cr, uid, ref("complete_reship_wiz"), context=context)
    self.reship_line(cr, uid, wizard.id, wizard.original_lines[0].id)
    res = self.complete(cr, uid, wizard.id, context=context)
    assert res.get('res_model') == 'sale.order', "Did not return sale.order in response!"
    assert res.get('res_id'), "Did not return sale.order ID in response!"
    sale = self.pool.get("sale.order").browse(cr, uid, res.get("res_id"), context=context)
    assert sale.amount_total == 0.0, "Sale total is not zero!"
    assert len(sale.order_line) == 1, "Sale does not have only one line!"
    assert sale.payment_method == "no_charge", "Sale has wrong payment method!"

-
  Create an invoice for our "incorrect_sale" so we can issue an exchange.
-
  !python {model: sale.order}: |
    self.action_invoice_create(cr, uid, [ref('incorrect_sale')], context=context)

-
  Create a wizard.
-
  !record {model: reship.wizard, id: complete_exchange_wiz}:
    sale_order_id: incorrect_sale

-
  Make sure that completing the wizard for an exchange creates a sale order with the correct lines and cost.
-
  !python {model: reship.wizard}: |
    wizard = self.browse(cr, uid, ref("complete_exchange_wiz"), context=context)
    self.refund_line(cr, uid, wizard.id, wizard.original_lines[0].id)
    new_line_id = self.pool.get("sale.order.line").copy(cr, uid, wizard.original_lines[0].id)
    self.add_line(cr, uid, [wizard.id], new_line_id)
    res = self.complete(cr, uid, wizard.id, context=context)
    assert res.get('res_model') == 'sale.order', "Did not return sale.order in response!"
    assert res.get('res_id'), "Did not return sale.order ID in response!"
    sale = self.pool.get("sale.order").browse(cr, uid, res.get("res_id"), context=context)
    assert sale.amount_total == 0.0, "Sale total is not zero!"
    assert len(sale.order_line) == 1, "Sale does not have only one line!"
    assert sale.payment_method == "no_charge", "Sale has incorrect payment method!"

-
  Create a sales order...
-
  !record {model: sale.order, id: refund_sale}:
    name: "Test Refund SO"
    company_id: stock.res_company_2
    partner_id: base.partner_demo
    partner_invoice_id: base.partner_demo
    partner_shipping_id: base.partner_demo
    shop_id: sale.sale_shop_1
    pricelist_id: product.list0

-
  ...with a sales order line...
-
  !record {model: sale.order.line, id: refund_line}:
    order_id: refund_sale
    name: "Test Product"
    product_id: test_product
    product_uom_qty: 1
    product_uos_qty: 1
    product_uom: product.product_uom_unit
    price_unit: 30.0

-
  ...and confirm and pay for it so we can do a full refund.
-
  !python {model: sale.order}: |
    self.action_button_confirm(cr, uid, [ref('refund_sale')], context=context)
    self.action_invoice_create(cr, uid, [ref('refund_sale')], context=context)

-
  Create a wizard.
-
  !record {model: reship.wizard, id: complete_refund_wiz}:
    sale_order_id: refund_sale

-
  Make sure that completing the wizard for a refund shows an appropriate message to the user,
  and that a refund invoice is created.
-
  !python {model: reship.wizard}: |
    wizard = self.browse(cr, uid, ref("complete_refund_wiz"), context=context)
    self.refund_line(cr, uid, wizard.id, wizard.original_lines[0].id)
    res = self.complete(cr, uid, wizard.id, context=context)
    assert res.get('tag') == 'action_info', "Did not return an appropriate message type!"
    invoices = wizard.sale_order_id.invoice_ids
    assert len(invoices) == 2, "Got %s invoice(s) for the sale!" % len(invoices)
    refund = invoices[0] if 'refund' in invoices[0].type else invoices[1]
    assert 'refund' in refund.type, "Invoice is not a refund!"
    assert refund.amount_total == wizard.original_lines[0].price_subtotal, "Refund is not for the correct amount!"
